{
  "name": "baudio",
  "version": "2.1.0",
  "description": "generate audio streams with functions",
  "main": "index.js",
  "bin": {
    "baudio": "bin/cmd.js"
  },
  "directories": {
    "example": "example"
  },
  "dependencies": {
    "concat-stream": "^1.4.4",
    "inherits": "~1.0.0",
    "minimist": "0.0.8",
    "parse-duration": "^0.1.0",
    "readable-stream": "~1.1.8",
    "syntax-error": "^1.1.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/baudio.git"
  },
  "homepage": "https://github.com/substack/baudio",
  "keywords": [
    "audio",
    "raw",
    "sound",
    "wav",
    "sine",
    "stream"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# baudio\n\ngenerate audio streams with functions\n\n![oscilloscope](http://substack.net/images/oscilloscope.png)\n\n# videos\n\n[the science and mathematics of music](http://www.youtube.com/watch?v=i_0DXxNeaQ0)\n\n[making algorithmic music with baudio](http://www.youtube.com/watch?v=2oz_SwhBixs)\n\n# example\n\n``` js\nvar baudio = require('baudio');\n\nvar n = 0;\nvar b = baudio(function (t) {\n    var x = Math.sin(t * 262 + Math.sin(n));\n    n += Math.sin(t);\n    return x;\n});\nb.play();\n```\n\n# methods\n\n``` js\nvar baudio = require('baudio')\n```\n\n## var b = baudio(opts={}, fn)\n\nReturn a readable stream of raw audio data based on the function `fn(t,i)`.\n\n`fn(t,i)` is given the time in seconds `t` and the step counter `i`.\n`fn(t,i)` should return an amplitude value between -1 and 1, inclusive. Values\noutside that range will be clipped.\n\nThe `opts.rate` is the rate of the output stream in Hz, default 44000.\n\n## b.play(opts)\n\nPlay the audio demo with the [play command](http://sox.sourceforge.net/).\n\nYou can also call `b.pipe()` to handle the output stream yourself.\n\n`opts` are passed directly through to sox.\n\n## b.record(file, opts)\n\nSave the audio stream to `file` using the\n[sox command](http://sox.sourceforge.net/).\n\nYou can also call `b.pipe()` to handle the output stream yourself.\n\n`opts` are passed directly through to sox.\n\n# usage\n\n```\nusage: baudio FILE {-o OUTFILE} OPTIONS\n\n  Play a javascript music FILE. FILE should export a method signature of:\n\n    return function (t) {\n        return Math.sin(2 * Math.PI * t * 441);\n    };\n  \n  where the return value is between -1 and 1, inclusive. Values outside of the\n  domain -1 through 1 will be clipped.\n  \n  If -o is given, output will be written to OUTFILE instead. OUTFILE can be any\n  media file that sox supports for output: .mp3, .wav, .ogg, whatever.\n  \n  You can also use \"-\" for -o to write to stdout.\n\n  Extra OPTIONS include:\n\n    -d, --duration   How long the song should play as a human-parseable string.\n\n    -t, --offset     Jump to this time offset as a human-parseable string.\n\n    -f, --fade       Length of a trailing fade as a human-parseable string.\n \n    -r, --rate       Bitrate to use. Default: 44k.\n \n  Example usage:\n\n    Play a song:\n\n      baudio beepboop.js\n\n    Play a song for 30 seconds:\n\n      baudio beepboop.js -d 30s\n\n    Record 3 minutes of audio to beepboop.mp3 starting at 20 seconds:\n\n      baudio beepboop.js -d 3m -t 20s -o beepboop.mp3\n\n```\n\n# install\n\nWith [npm](http://npmjs.org), to get the library do:\n\n```\nnpm install baudio\n```\n\nand to get the command, do:\n\n```\nnpm install -g baudio\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/baudio/issues"
  },
  "_id": "baudio@2.1.0",
  "_from": "baudio@*"
}
